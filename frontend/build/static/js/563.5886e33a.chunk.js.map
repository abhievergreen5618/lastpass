{"version":3,"file":"static/js/563.5886e33a.chunk.js","mappings":"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","sources":["utilities/apiurl.js","../node_modules/@coreui/icons/src/free/cil-user.ts","views/pages/register/Register.js","../node_modules/@coreui/react/src/components/form/CInputGroup.tsx","../node_modules/@coreui/react/src/components/form/CInputGroupText.tsx"],"sourcesContent":["export const loginUrl = process.env.REACT_APP_API_URL + 'login'\nexport const registerUrl = process.env.REACT_APP_API_URL + 'register'\n","export var cilUser = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M411.6,343.656l-72.823-47.334,27.455-50.334A80.23,80.23,0,0,0,376,207.681V128a112,112,0,0,0-224,0v79.681a80.236,80.236,0,0,0,9.768,38.308l27.455,50.333L116.4,343.656A79.725,79.725,0,0,0,80,410.732V496H448V410.732A79.727,79.727,0,0,0,411.6,343.656ZM416,464H112V410.732a47.836,47.836,0,0,1,21.841-40.246l97.66-63.479-41.64-76.341A48.146,48.146,0,0,1,184,207.681V128a80,80,0,0,1,160,0v79.681a48.146,48.146,0,0,1-5.861,22.985L296.5,307.007l97.662,63.479h0A47.836,47.836,0,0,1,416,410.732Z' class='ci-primary'/>\"];\n","import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CFormFeedback,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport { Formik } from 'formik'\nimport * as yup from 'yup'\nimport axios from 'axios'\nimport { toast } from 'react-toastify'\nimport { useNavigate } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport { loginSuccess } from '../../../redux-state/authSlice'\nimport { registerUrl } from 'src/utilities/apiurl'\n\nfunction Register() {\n  const dispatch = useDispatch()\n  const schema = yup.object().shape({\n    name: yup.string().required('Field is required'),\n    email: yup.string().email('Please enter an valid email').required('Field is required'),\n    password: yup.string().required('Field is required'),\n    password_confirmation: yup\n      .string()\n      .oneOf([yup.ref('password'), null], 'Passwords must match')\n      .required('Field is required'),\n  })\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n    password_confirmation: '',\n  }\n\n  const navigate = useNavigate()\n\n  const onSubmit = async (values, { setSubmitting, setErrors }) => {\n    try {\n      setSubmitting(true)\n      // Make an API request to your server for validation\n      const response = await axios.post(registerUrl, values)\n      if (response.status == 200) {\n        dispatch(loginSuccess({ user: response.data.user, token: response.data.token }))\n        toast.success(response.data.message)\n        navigate('/dashboard')\n      }\n    } catch (error) {\n      if (error.response.status == 422) {\n        setErrors(error.response.data.errors)\n        toast.error(error.response.data.message)\n      } else if (error.hasOwnProperty('response') && error.response.status == 500) {\n        toast.error('Server Error')\n      } else {\n        toast.error('OoPs! Something Went Wrong.')\n      }\n    } finally {\n      setSubmitting(false)\n    }\n  }\n\n  const confirmpasswordinvalid = (touched, errors) => {\n    return touched.password_confirmation && errors.password_confirmation ? true : false\n  }\n\n  return (\n    <div className=\"bg-body-tertiary min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={9} lg={7} xl={6}>\n            <CCard className=\"mx-4\">\n              <CCardBody className=\"p-4\">\n                <Formik validationSchema={schema} onSubmit={onSubmit} initialValues={initialValues}>\n                  {({ handleSubmit, handleChange, values, touched, errors, isSubmitting }) => (\n                    <CForm noValidate onSubmit={handleSubmit}>\n                      <h1>Register</h1>\n                      <p className=\"text-body-secondary\">Create your account</p>\n                      <CInputGroup className=\"mb-3\">\n                        <CInputGroupText>\n                          <CIcon icon={cilUser} />\n                        </CInputGroupText>\n                        <CFormInput\n                          placeholder=\"Full Name\"\n                          type=\"text\"\n                          name=\"name\"\n                          value={values.name}\n                          onChange={handleChange}\n                          invalid={touched.name && errors.name ? true : false}\n                        />\n                        <CFormFeedback invalid>{errors.name}</CFormFeedback>\n                      </CInputGroup>\n                      <CInputGroup className=\"mb-3\">\n                        <CInputGroupText>@</CInputGroupText>\n                        <CFormInput\n                          placeholder=\"Email\"\n                          autoComplete=\"email\"\n                          type=\"email\"\n                          name=\"email\"\n                          value={values.email}\n                          onChange={handleChange}\n                          invalid={touched.email && errors.email ? true : false}\n                        />\n                        <CFormFeedback invalid>{errors.email}</CFormFeedback>\n                      </CInputGroup>\n                      <CInputGroup className=\"mb-3\">\n                        <CInputGroupText>\n                          <CIcon icon={cilLockLocked} />\n                        </CInputGroupText>\n                        <CFormInput\n                          type=\"password\"\n                          placeholder=\"Password\"\n                          autoComplete=\"new-password\"\n                          name=\"password\"\n                          value={values.password}\n                          onChange={handleChange}\n                          invalid={touched.password && errors.password ? true : false}\n                        />\n                        <CFormFeedback invalid>{errors.password}</CFormFeedback>\n                      </CInputGroup>\n                      <CInputGroup className=\"mb-4\">\n                        <CInputGroupText>\n                          <CIcon icon={cilLockLocked} />\n                        </CInputGroupText>\n                        <CFormInput\n                          type=\"password\"\n                          name=\"password_confirmation\"\n                          placeholder=\"Repeat password\"\n                          autoComplete=\"new-password\"\n                          value={values.password_confirmation}\n                          onChange={handleChange}\n                          invalid={confirmpasswordinvalid(touched, errors)}\n                        />\n                        <CFormFeedback invalid>{errors.password_confirmation}</CFormFeedback>\n                      </CInputGroup>\n                      <div className=\"d-grid\">\n                        <CButton type=\"submit\" color=\"success\" disabled={isSubmitting}>\n                          {isSubmitting ? 'Creating Account...' : 'Create Account'}\n                        </CButton>\n                      </div>\n                    </CForm>\n                  )}\n                </Formik>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Register\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CInputGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n}\n\nexport const CInputGroup = forwardRef<HTMLDivElement, CInputGroupProps>(\n  ({ children, className, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'input-group',\n          {\n            [`input-group-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCInputGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n}\n\nCInputGroup.displayName = 'CInputGroup'\n","import React, { ElementType, forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CInputGroupTextProps\n  extends LabelHTMLAttributes<HTMLLabelElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CInputGroupText: PolymorphicRefForwardingComponent<'span', CInputGroupTextProps> =\n  forwardRef<HTMLLabelElement | HTMLSpanElement, CInputGroupTextProps>(\n    ({ children, as: Component = 'span', className, ...rest }, ref) => {\n      return (\n        <Component className={classNames('input-group-text', className)} {...rest} ref={ref}>\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCInputGroupText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCInputGroupText.displayName = 'CInputGroupText'\n"],"names":["loginUrl","process","registerUrl","cilUser","dispatch","useDispatch","schema","yup","shape","name","required","email","password","password_confirmation","oneOf","navigate","useNavigate","confirmpasswordinvalid","touched","errors","_jsx","className","children","CContainer","CRow","CCol","md","lg","xl","CCard","CCardBody","Formik","validationSchema","onSubmit","async","values","_ref","setSubmitting","setErrors","response","axios","post","status","loginSuccess","user","data","token","toast","success","message","error","hasOwnProperty","initialValues","_ref2","handleSubmit","handleChange","isSubmitting","_jsxs","CForm","noValidate","CInputGroup","CInputGroupText","CIcon","icon","CFormInput","placeholder","type","value","onChange","invalid","CFormFeedback","autoComplete","cilLockLocked","CButton","color","disabled","forwardRef","_a","ref","size","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","displayName","as","Component"],"sourceRoot":""}