{"version":3,"file":"static/js/277.5fe77c37.chunk.js","mappings":"4LAAO,MAAMA,EAAWC,+EACXC,EAAcD,iF,4ICUdE,GAAaC,EAAAA,EAAAA,aACxB,SAACC,EAAkCC,GAAhC,IAAAC,EAAQF,EAAAE,SAAEC,EAASH,EAAAG,UAAKC,GAA1BC,EAAAA,EAAAA,IAAAL,EAAA,0BACC,OACEM,EAAAA,cAAA,OAAAC,EAAAA,EAAAA,IAAA,CAAKJ,WAAWK,EAAAA,EAAAA,GAAW,aAAcL,IAAgBC,EAAI,CAAEH,IAAKA,IACjEC,EAGP,IAGFJ,EAAWW,UAAY,CACrBP,SAAUQ,IAAAA,KACVP,UAAWO,IAAAA,QAGbZ,EAAWa,YAAc,a,iMCiIzB,QAhIA,WACE,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAAaE,MAAM,+BAA+BC,SAAS,qBAClEC,SAAUJ,EAAAA,KAAaG,SAAS,uBAO5BE,GAAWC,EAAAA,EAAAA,MA0BjB,OACEC,EAAAA,EAAAA,KAAA,OAAKnB,UAAU,iEAAgED,UAC7EoB,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAArB,UACToB,EAAAA,EAAAA,KAACE,EAAAA,EAAI,CAACrB,UAAU,yBAAwBD,UACtCoB,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CAACC,GAAI,EAAExB,UACVyB,EAAAA,EAAAA,MAAC7B,EAAU,CAAAI,SAAA,EACToB,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACzB,UAAU,MAAKD,UACpBoB,EAAAA,EAAAA,KAACO,EAAAA,EAAS,CAAA3B,UACRoB,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CACLC,iBAAkBjB,EAClBkB,SAlCDC,MAAOC,EAAMC,KAAoC,IAAlC,cAAEC,EAAa,UAAEC,GAAWF,EAC1D,IACEC,GAAc,GAEd,MAAME,QAAiBC,EAAAA,EAAMC,KAAK7C,EAAAA,EAAUuC,GACrB,KAAnBI,EAASG,SACX7B,GAAS8B,EAAAA,EAAAA,IAAa,CAAEC,MAAOL,EAASM,KAAKD,SAC7CE,EAAAA,GAAMC,QAAQR,EAASM,KAAKG,SAC5B3B,EAAS,cAEb,CAAE,MAAO4B,GACHA,EAAMC,eAAe,aAAwC,KAAzBD,EAAMV,SAASG,QACrDJ,EAAUW,EAAMV,SAASM,KAAKM,QAC9BL,EAAAA,GAAMG,MAAMA,EAAMV,SAASM,KAAKG,UACvBC,EAAMC,eAAe,aAAwC,KAAzBD,EAAMV,SAASG,OAC5DI,EAAAA,GAAMG,MAAM,gBAEZH,EAAAA,GAAMG,MAAM,8BAEhB,CAAC,QACCZ,GAAc,EAChB,GAcgBe,cAzCI,CACpBlC,MAAO,GACPE,SAAU,IAuCmCjB,SAE5BkD,IAAA,IAAC,aAAEC,EAAY,aAAEC,EAAY,OAAEpB,EAAM,QAAEqB,EAAO,OAAEL,EAAM,aAAEM,GAAcJ,EAAA,OACrEzB,EAAAA,EAAAA,MAAC8B,EAAAA,EAAK,CAACC,YAAU,EAAC1B,SAAUqB,EAAanD,SAAA,EACvCoB,EAAAA,EAAAA,KAAA,MAAApB,SAAI,WACJoB,EAAAA,EAAAA,KAAA,KAAGnB,UAAU,sBAAqBD,SAAC,6BACnCyB,EAAAA,EAAAA,MAACgC,EAAAA,EAAW,CAACxD,UAAU,OAAMD,SAAA,EAC3BoB,EAAAA,EAAAA,KAACsC,EAAAA,EAAe,CAAA1D,SAAC,OACjBoB,EAAAA,EAAAA,KAACuC,EAAAA,EAAU,CACTC,YAAY,QACZC,aAAa,QACbC,KAAK,QACLC,KAAK,QACLC,MAAOhC,EAAOjB,MACdkD,SAAUb,EACVc,WAASb,EAAQtC,QAASiC,EAAOjC,UAEnCK,EAAAA,EAAAA,KAAC+C,EAAAA,EAAa,CAACD,SAAO,EAAAlE,SAAEgD,EAAOjC,YAEjCU,EAAAA,EAAAA,MAACgC,EAAAA,EAAW,CAACxD,UAAU,OAAMD,SAAA,EAC3BoB,EAAAA,EAAAA,KAACsC,EAAAA,EAAe,CAAA1D,UACdoB,EAAAA,EAAAA,KAACgD,EAAAA,EAAK,CAACC,KAAMC,EAAAA,OAEflD,EAAAA,EAAAA,KAACuC,EAAAA,EAAU,CACTG,KAAK,WACLF,YAAY,WACZC,aAAa,eACbE,KAAK,WACLC,MAAOhC,EAAOf,SACdgD,SAAUb,EACVc,WAASb,EAAQpC,WAAY+B,EAAO/B,aAEtCG,EAAAA,EAAAA,KAAC+C,EAAAA,EAAa,CAACD,SAAO,EAAAlE,SAAEgD,EAAO/B,eAEjCQ,EAAAA,EAAAA,MAACH,EAAAA,EAAI,CAAAtB,SAAA,EACHoB,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CAACgD,GAAI,EAAEvE,UACVoB,EAAAA,EAAAA,KAACoD,EAAAA,EAAO,CACNV,KAAK,SACLW,MAAM,UACNC,SAAUpB,EACVrD,UAAU,OAAMD,SAEfsD,EAAe,aAAe,aAGnClC,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CAACgD,GAAI,EAAGtE,UAAU,aAAYD,UACjCoB,EAAAA,EAAAA,KAACoD,EAAAA,EAAO,CAACC,MAAM,OAAOxE,UAAU,OAAMD,SAAC,4BAKrC,SAKhBoB,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACzB,UAAU,6BAA6B0E,MAAO,CAAEC,MAAO,OAAQ5E,UACpEoB,EAAAA,EAAAA,KAACO,EAAAA,EAAS,CAAC1B,UAAU,cAAaD,UAChCyB,EAAAA,EAAAA,MAAA,OAAAzB,SAAA,EACEoB,EAAAA,EAAAA,KAAA,MAAApB,SAAI,aACJoB,EAAAA,EAAAA,KAAA,KAAApB,SAAG,kIAIHoB,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACC,GAAG,YAAW9E,UAClBoB,EAAAA,EAAAA,KAACoD,EAAAA,EAAO,CAACC,MAAM,UAAUxE,UAAU,OAAO8E,QAAM,EAACC,UAAW,EAAEhF,SAAC,qCAarF,C,uFC1IayD,GAAc5D,EAAAA,EAAAA,aACzB,SAACC,EAAwCC,G,MAAtCC,EAAQF,EAAAE,SAAEC,EAASH,EAAAG,UAAEgF,EAAInF,EAAAmF,KAAK/E,GAAhCC,EAAAA,EAAAA,IAAAL,EAAA,iCACC,OACEM,EAAAA,cACE,OAAAC,EAAAA,EAAAA,IAAA,CAAAJ,WAAWK,EAAAA,EAAAA,GACT,eAAa4E,EAAA,GAEXA,EAAC,eAAeC,OAAAF,IAASA,EAAI,GAE/BhF,IAEEC,EACJ,CAAAH,IAAKA,IAEJC,EAGP,IAGFyD,EAAYlD,UAAY,CACtBP,SAAUQ,IAAAA,KACVP,UAAWO,IAAAA,OACXyE,KAAMzE,IAAAA,MAAgB,CAAC,KAAM,QAG/BiD,EAAYhD,YAAc,a,uFCvBbiD,GACX7D,EAAAA,EAAAA,aACE,SAACC,EAA0DC,GAAxD,IAAAC,EAAQF,EAAAE,SAAEkF,EAAsBpF,EAAAsF,GAAlBC,OAAY,IAAAH,EAAA,OAAMA,EAAEjF,EAASH,EAAAG,UAAKC,GAAIC,EAAAA,EAAAA,IAAAL,EAAtD,+BACC,OACEM,EAAAA,cAACiF,GAAShF,EAAAA,EAAAA,IAAA,CAACJ,WAAWK,EAAAA,EAAAA,GAAW,mBAAoBL,IAAgBC,EAAI,CAAEH,IAAKA,IAC7EC,EAGP,IAGJ0D,EAAgBnD,UAAY,CAC1B6E,GAAI5E,IAAAA,YACJR,SAAUQ,IAAAA,KACVP,UAAWO,IAAAA,QAGbkD,EAAgBjD,YAAc,iB","sources":["utilities/apiurl.js","../node_modules/@coreui/react/src/components/card/CCardGroup.tsx","views/pages/login/Login.js","../node_modules/@coreui/react/src/components/form/CInputGroup.tsx","../node_modules/@coreui/react/src/components/form/CInputGroupText.tsx"],"sourcesContent":["export const loginUrl = process.env.REACT_APP_API_URL + 'login'\nexport const registerUrl = process.env.REACT_APP_API_URL + 'register'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardGroup = forwardRef<HTMLDivElement, CCardGroupProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-group', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardGroup.displayName = 'CCardGroup'\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CFormFeedback,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport { Formik } from 'formik'\nimport * as yup from 'yup'\nimport axios from 'axios'\nimport { toast } from 'react-toastify'\nimport { useNavigate } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport { loginSuccess } from '../../../redux-state/authSlice'\nimport { loginUrl } from 'src/utilities/apiurl'\n\nfunction Login() {\n  const dispatch = useDispatch()\n  const schema = yup.object().shape({\n    email: yup.string().email('Please enter an valid email').required('Field is required'),\n    password: yup.string().required('Field is required'),\n  })\n\n  const initialValues = {\n    email: '',\n    password: '',\n  }\n  const navigate = useNavigate()\n\n  const onSubmit = async (values, { setSubmitting, setErrors }) => {\n    try {\n      setSubmitting(true)\n      // Make an API request to your server for validation\n      const response = await axios.post(loginUrl, values)\n      if (response.status == 200) {\n        dispatch(loginSuccess({ token: response.data.token }))\n        toast.success(response.data.message)\n        navigate('/dashboard')\n      }\n    } catch (error) {\n      if (error.hasOwnProperty('response') && error.response.status == 422) {\n        setErrors(error.response.data.errors)\n        toast.error(error.response.data.message)\n      } else if (error.hasOwnProperty('response') && error.response.status == 500) {\n        toast.error('Server Error')\n      } else {\n        toast.error('OoPs! Something Went Wrong.')\n      }\n    } finally {\n      setSubmitting(false)\n    }\n  }\n\n  return (\n    <div className=\"bg-body-tertiary min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={8}>\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <Formik\n                    validationSchema={schema}\n                    onSubmit={onSubmit}\n                    initialValues={initialValues}\n                  >\n                    {({ handleSubmit, handleChange, values, touched, errors, isSubmitting }) => (\n                      <CForm noValidate onSubmit={handleSubmit}>\n                        <h1>Login</h1>\n                        <p className=\"text-body-secondary\">Sign In to your account</p>\n                        <CInputGroup className=\"mb-3\">\n                          <CInputGroupText>@</CInputGroupText>\n                          <CFormInput\n                            placeholder=\"Email\"\n                            autoComplete=\"email\"\n                            type=\"email\"\n                            name=\"email\"\n                            value={values.email}\n                            onChange={handleChange}\n                            invalid={touched.email && errors.email ? true : false}\n                          />\n                          <CFormFeedback invalid>{errors.email}</CFormFeedback>\n                        </CInputGroup>\n                        <CInputGroup className=\"mb-3\">\n                          <CInputGroupText>\n                            <CIcon icon={cilLockLocked} />\n                          </CInputGroupText>\n                          <CFormInput\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            autoComplete=\"new-password\"\n                            name=\"password\"\n                            value={values.password}\n                            onChange={handleChange}\n                            invalid={touched.password && errors.password ? true : false}\n                          />\n                          <CFormFeedback invalid>{errors.password}</CFormFeedback>\n                        </CInputGroup>\n                        <CRow>\n                          <CCol xs={6}>\n                            <CButton\n                              type=\"submit\"\n                              color=\"primary\"\n                              disabled={isSubmitting}\n                              className=\"px-4\"\n                            >\n                              {isSubmitting ? 'Loading...' : 'Login'}\n                            </CButton>\n                          </CCol>\n                          <CCol xs={6} className=\"text-right\">\n                            <CButton color=\"link\" className=\"px-0\">\n                              Forgot password?\n                            </CButton>\n                          </CCol>\n                        </CRow>\n                      </CForm>\n                    )}\n                  </Formik>\n                </CCardBody>\n              </CCard>\n              <CCard className=\"text-white bg-primary py-5\" style={{ width: '44%' }}>\n                <CCardBody className=\"text-center\">\n                  <div>\n                    <h2>Sign up</h2>\n                    <p>\n                      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                      tempor incididunt ut labore et dolore magna aliqua.\n                    </p>\n                    <Link to=\"/register\">\n                      <CButton color=\"primary\" className=\"mt-3\" active tabIndex={-1}>\n                        Register Now!\n                      </CButton>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CInputGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n}\n\nexport const CInputGroup = forwardRef<HTMLDivElement, CInputGroupProps>(\n  ({ children, className, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'input-group',\n          {\n            [`input-group-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCInputGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n}\n\nCInputGroup.displayName = 'CInputGroup'\n","import React, { ElementType, forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CInputGroupTextProps\n  extends LabelHTMLAttributes<HTMLLabelElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CInputGroupText: PolymorphicRefForwardingComponent<'span', CInputGroupTextProps> =\n  forwardRef<HTMLLabelElement | HTMLSpanElement, CInputGroupTextProps>(\n    ({ children, as: Component = 'span', className, ...rest }, ref) => {\n      return (\n        <Component className={classNames('input-group-text', className)} {...rest} ref={ref}>\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCInputGroupText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCInputGroupText.displayName = 'CInputGroupText'\n"],"names":["loginUrl","process","registerUrl","CCardGroup","forwardRef","_a","ref","children","className","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","dispatch","useDispatch","schema","yup","shape","email","required","password","navigate","useNavigate","_jsx","CContainer","CRow","CCol","md","_jsxs","CCard","CCardBody","Formik","validationSchema","onSubmit","async","values","_ref","setSubmitting","setErrors","response","axios","post","status","loginSuccess","token","data","toast","success","message","error","hasOwnProperty","errors","initialValues","_ref2","handleSubmit","handleChange","touched","isSubmitting","CForm","noValidate","CInputGroup","CInputGroupText","CFormInput","placeholder","autoComplete","type","name","value","onChange","invalid","CFormFeedback","CIcon","icon","cilLockLocked","xs","CButton","color","disabled","style","width","Link","to","active","tabIndex","size","_b","concat","as","Component"],"sourceRoot":""}