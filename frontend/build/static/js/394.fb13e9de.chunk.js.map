{"version":3,"file":"static/js/394.fb13e9de.chunk.js","mappings":"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","sources":["views/items/Password/PasswordModal.js","views/items/Folders/FolderModal.js","views/items/Notes/NotesModal.js","views/items/Addresses/AddressModal.js","views/dashboard/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCol,\n  CRow,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CModal,\n  CModalTitle,\n  CFormInput,\n  CFormSelect,\n  CForm,\n  CFormTextarea,\n  CFormFeedback,\n} from '@coreui/react'\nimport { cilArrowCircleLeft } from '@coreui/icons'\nimport { Formik } from 'formik'\nimport * as yup from 'yup'\nimport api from '../../../redux-state/api'\nimport { toast } from 'react-toastify'\nimport PropTypes from 'prop-types'\nimport CIcon from '@coreui/icons-react'\nimport { useDispatch } from 'react-redux'\nimport { useNavigate } from 'react-router-dom'\nimport { NotAuthenticatedHandler } from '../../../utilities/auth'\nimport { logoutSuccess } from '../../../redux-state/authSlice'\n\nfunction PasswordModal(props) {\n  const [Currentvisible, setCurrentVisible] = useState(props.passwordvisible)\n  const [foldersList, setFoldersList] = useState(props.folders)\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const schema = yup.object().shape({\n    url: yup.string().required('Field is required'),\n    name: yup.string().required('Field is required'),\n    folder: yup.string().required('Field is required'),\n    username: yup.string().required('Field is required'),\n    password: yup.string().required('Field is required'),\n  })\n\n  const initialValues = {\n    url: '',\n    name: '',\n    folder: '',\n    username: '',\n    password: '',\n  }\n\n  useEffect(() => {\n    // Your useEffect logic goes here\n    console.log('Component mounted!')\n    // Cleanup function (optional)\n    return () => {\n      console.log('Component will unmount!')\n    }\n  }, [])\n\n  const onSubmit = async (values, { setSubmitting, setErrors, resetForm }) => {\n    try {\n      setSubmitting(true)\n      // Make an API request to your server for validation\n      const response = await api.post('/savepassword', values)\n      if (response.status == 200) {\n        try {\n          const response = await api.post('/getpasswordlist')\n          props.passwordlist(response.data.passwords)\n          console.log(response.data.passwords)\n        } catch (error) {\n          const result = await NotAuthenticatedHandler(error)\n          if (result) {\n            dispatch(logoutSuccess())\n            navigate('/login')\n          }\n          if (error.hasOwnProperty('response') && error.response.status == 500) {\n            toast.error('Server Error')\n          } else {\n            toast.error('OoPs! Something Went Wrong.')\n          }\n          console.error('API request failed:', error)\n        }\n        toast.success(response.data.message)\n        resetForm()\n        props.handleClick('password')\n        setCurrentVisible(false)\n      }\n    } catch (error) {\n      if (error.response.status == 422) {\n        setErrors(error.response.data.errors)\n        toast.error(error.response.data.message)\n      } else if (error.hasOwnProperty('response') && error.response.status == 500) {\n        toast.error('Server Error')\n      } else {\n        toast.error('OoPs! Something Went Wrong.')\n      }\n    } finally {\n      setSubmitting(false)\n    }\n  }\n\n  return (\n    <CModal\n      backdrop=\"static\"\n      alignment=\"center\"\n      size=\"lg\"\n      visible={Currentvisible}\n      aria-labelledby=\"ToggleBetweenModalsExample2\"\n    >\n      <Formik validationSchema={schema} onSubmit={onSubmit} initialValues={initialValues}>\n        {({ handleSubmit, handleChange, values, touched, errors, isSubmitting }) => (\n          <CForm className=\"row g-3\" noValidate onSubmit={handleSubmit}>\n            <CModalHeader>\n              <CModalTitle id=\"ToggleBetweenModalsExample2\">\n                <CButton\n                  type=\"button\"\n                  color=\"primary\"\n                  onClick={() => {\n                    setCurrentVisible(false)\n                    props.handleClick('handleClick')\n                  }}\n                >\n                  <CIcon icon={cilArrowCircleLeft} className=\"ml-2\" /> Back to All Items\n                </CButton>\n              </CModalTitle>\n            </CModalHeader>\n            <CModalBody className=\"m-2\">\n              <CRow>\n                <CCol xs={12} className=\"my-2\">\n                  <CFormInput\n                    id=\"url\"\n                    label=\"Url\"\n                    placeholder=\"www.google.com\"\n                    name=\"url\"\n                    onChange={handleChange}\n                    invalid={touched.url && errors.url ? true : false}\n                    value={values.url}\n                  />\n\n                  <CFormFeedback invalid>{errors.url}</CFormFeedback>\n                </CCol>\n                <CCol md={6} className=\"my-2\">\n                  <CFormInput\n                    type=\"text\"\n                    id=\"name\"\n                    label=\"Name\"\n                    name=\"name\"\n                    value={values.name}\n                    onChange={handleChange}\n                    invalid={touched.name && errors.name ? true : false}\n                  />\n                  <CFormFeedback invalid>{errors.name}</CFormFeedback>\n                </CCol>\n                <CCol md={6} className=\"my-2\">\n                  <CFormSelect\n                    type=\"text\"\n                    id=\"inputState\"\n                    label=\"Folder\"\n                    name=\"folder\"\n                    onChange={handleChange}\n                    invalid={touched.folder && errors.folder ? true : false}\n                    value={values.folder}\n                  >\n                    <option value=\"\">Choose...</option>\n                    {foldersList.map((folder) => (\n                      <option key={folder.id} value={folder.id}>\n                        {folder.folder_name}\n                      </option>\n                    ))}\n                  </CFormSelect>\n                  <CFormFeedback invalid>{errors.folder}</CFormFeedback>\n                </CCol>\n                <CCol md={6} className=\"my-2\">\n                  <CFormInput\n                    type=\"text\"\n                    id=\"username\"\n                    label=\"Username\"\n                    name=\"username\"\n                    value={values.username}\n                    onChange={handleChange}\n                    invalid={touched.username && errors.username ? true : false}\n                  />\n                  <CFormFeedback invalid>{errors.username}</CFormFeedback>\n                </CCol>\n                <CCol md={6} className=\"my-2\">\n                  <CFormInput\n                    type=\"password\"\n                    id=\"password\"\n                    label=\"Site password\"\n                    name=\"password\"\n                    value={values.password}\n                    onChange={handleChange}\n                    invalid={touched.password && errors.password ? true : false}\n                  />\n                  <CFormFeedback invalid>{errors.password}</CFormFeedback>\n                </CCol>\n                <CCol xs={12} className=\"my-2\">\n                  <CFormTextarea\n                    id=\"notes\"\n                    label=\"Notes\"\n                    rows={3}\n                    text=\"Must be 8-20 words long.\"\n                    value={values.notes}\n                    onChange={handleChange}\n                    name=\"notes\"\n                    invalid={touched.notes && errors.notes ? true : false}\n                  ></CFormTextarea>\n                  <CFormFeedback invalid>{errors.notes}</CFormFeedback>\n                </CCol>\n              </CRow>\n            </CModalBody>\n            <CModalFooter>\n              <CButton type=\"submit\" color=\"primary\">\n                Save changes\n              </CButton>\n            </CModalFooter>\n          </CForm>\n        )}\n      </Formik>\n    </CModal>\n  )\n}\n\n// Prop types definition\nPasswordModal.propTypes = {\n  passwordvisible: PropTypes.bool.isRequired, // Assuming 'passwordvisible' is a boolean and is required\n  folders: PropTypes.array.isRequired, // Assuming 'folders' is an array and is required\n  passwordlist: PropTypes.func.isRequired, // Assuming 'passwordlist' is a function and is required\n  handleClick: PropTypes.func.isRequired, // Assuming 'visiblemain' is a function and is required\n}\n\nexport default PasswordModal\n","import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCol,\n  CRow,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CModal,\n  CModalTitle,\n  CFormInput,\n  CFormSelect,\n  CForm,\n  CFormTextarea,\n  CFormFeedback,\n} from '@coreui/react'\nimport { cilArrowCircleLeft } from '@coreui/icons'\nimport { Formik } from 'formik'\nimport * as yup from 'yup'\nimport api from '../../../redux-state/api'\nimport { toast } from 'react-toastify'\nimport PropTypes from 'prop-types'\nimport CIcon from '@coreui/icons-react'\nimport { useDispatch } from 'react-redux'\nimport { useNavigate } from 'react-router-dom'\nimport { NotAuthenticatedHandler } from '../../../utilities/auth'\nimport { logoutSuccess } from '../../../redux-state/authSlice'\n\nfunction FolderForm(props) {\n  const [Currentvisible, setCurrentVisible] = useState(props.passwordvisible)\n  const [foldersList, setFoldersList] = useState(props.folders)\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const schema = yup.object().shape({\n    url: yup.string().required('Field is required'),\n    name: yup.string().required('Field is required'),\n    folder: yup.string().required('Field is required'),\n    username: yup.string().required('Field is required'),\n    password: yup.string().required('Field is required'),\n  })\n\n  const initialValues = {\n    folder_name: '',\n    folder_parent: '',\n  }\n\n  useEffect(() => {\n    console.log('test')\n    // Your useEffect logic goes here\n    console.log('Component mounted!')\n    // Cleanup function (optional)\n    return () => {\n      console.log('Component will unmount!')\n    }\n  }, [])\n\n  const onSubmit = async (values, { setSubmitting, setErrors, resetForm }) => {\n    try {\n      setSubmitting(true)\n      // Make an API request to your server for validation\n      const response = await api.post('/savepassword', values)\n      if (response.status == 200) {\n        try {\n          const response = await api.post('/getpasswordlist')\n          props.passwordlist(response.data.passwords)\n          console.log(response.data.passwords)\n        } catch (error) {\n          const result = await NotAuthenticatedHandler(error)\n          if (result) {\n            dispatch(logoutSuccess())\n            navigate('/login')\n          }\n          if (error.hasOwnProperty('response') && error.response.status == 500) {\n            toast.error('Server Error')\n          } else {\n            toast.error('OoPs! Something Went Wrong.')\n          }\n          console.error('API request failed:', error)\n        }\n        toast.success(response.data.message)\n        resetForm()\n        props.handleClick('folder')\n        setCurrentVisible(false)\n      }\n    } catch (error) {\n      if (error.response.status == 422) {\n        setErrors(error.response.data.errors)\n        toast.error(error.response.data.message)\n      } else if (error.hasOwnProperty('response') && error.response.status == 500) {\n        toast.error('Server Error')\n      } else {\n        toast.error('OoPs! Something Went Wrong.')\n      }\n    } finally {\n      setSubmitting(false)\n    }\n  }\n\n  return (\n    <CModal\n      backdrop=\"static\"\n      alignment=\"center\"\n      size=\"lg\"\n      visible={Currentvisible}\n      aria-labelledby=\"ToggleBetweenModalsExample2\"\n    >\n      <Formik validationSchema={schema} onSubmit={onSubmit} initialValues={initialValues}>\n        {({ handleSubmit, handleChange, values, touched, errors, isSubmitting }) => (\n          <CForm className=\"row g-3\" noValidate onSubmit={handleSubmit}>\n            <CModalHeader>\n              <CModalTitle id=\"ToggleBetweenModalsExample2\">\n                <CButton\n                  type=\"button\"\n                  color=\"primary\"\n                  onClick={() => {\n                    setCurrentVisible(false)\n                    props.handleClick('folder')\n                  }}\n                >\n                  <CIcon icon={cilArrowCircleLeft} className=\"ml-2\" /> Back to All Items\n                </CButton>\n              </CModalTitle>\n            </CModalHeader>\n            <CModalBody className=\"m-2\">\n              <CRow>\n                <CCol xs={12} className=\"my-2\">\n                  <CFormInput\n                    type=\"text\"\n                    id=\"folder_name\"\n                    label=\"Folder Name\"\n                    placeholder=\"\"\n                    name=\"folder_name\"\n                    onChange={handleChange}\n                    invalid={touched.folder_name && errors.folder_name ? true : false}\n                    value={values.folder_name}\n                  />\n                  <CFormFeedback invalid>{errors.folder_name}</CFormFeedback>\n                </CCol>\n                <CCol md={12} className=\"my-2\">\n                  <CFormSelect\n                    id=\"inputState\"\n                    label=\"Folder\"\n                    name=\"folder_parent\"\n                    onChange={handleChange}\n                    invalid={touched.folder_parent && errors.folder_parent ? true : false}\n                    value={values.folder_parent}\n                  >\n                    <option value=\"\">Choose...</option>\n                    {foldersList.map((folder) => (\n                      <option key={folder.id} value={folder.id}>\n                        {folder.folder_name}\n                      </option>\n                    ))}\n                  </CFormSelect>\n                  <CFormFeedback invalid>{errors.folder_parent}</CFormFeedback>\n                </CCol>\n              </CRow>\n            </CModalBody>\n            <CModalFooter>\n              <CButton type=\"submit\" color=\"primary\">\n                Save changes\n              </CButton>\n            </CModalFooter>\n          </CForm>\n        )}\n      </Formik>\n    </CModal>\n  )\n}\n\n// Prop types definition\nFolderForm.propTypes = {\n  passwordvisible: PropTypes.bool.isRequired, // Assuming 'passwordvisible' is a boolean and is required\n  folders: PropTypes.array.isRequired, // Assuming 'folders' is an array and is required\n  passwordlist: PropTypes.func.isRequired, // Assuming 'passwordlist' is a function and is required\n  handleClick: PropTypes.func.isRequired, // Assuming 'visiblemain' is a function and is required\n}\n\nexport default FolderForm\n","import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCol,\n  CRow,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CModal,\n  CModalTitle,\n  CFormInput,\n  CFormSelect,\n  CForm,\n  CFormTextarea,\n  CFormFeedback,\n} from '@coreui/react'\nimport { cilArrowCircleLeft } from '@coreui/icons'\nimport { Formik } from 'formik'\nimport * as yup from 'yup'\nimport api from '../../../redux-state/api'\nimport { toast } from 'react-toastify'\nimport PropTypes from 'prop-types'\nimport CIcon from '@coreui/icons-react'\nimport { useDispatch } from 'react-redux'\nimport { useNavigate } from 'react-router-dom'\nimport { NotAuthenticatedHandler } from '../../../utilities/auth'\nimport { logoutSuccess } from '../../../redux-state/authSlice'\n\nfunction PasswordModal(props) {\n  const [Currentvisible, setCurrentVisible] = useState(props.passwordvisible)\n  const [foldersList, setFoldersList] = useState(props.folders)\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const schema = yup.object().shape({\n    url: yup.string().required('Field is required'),\n    name: yup.string().required('Field is required'),\n    folder: yup.string().required('Field is required'),\n    username: yup.string().required('Field is required'),\n    password: yup.string().required('Field is required'),\n  })\n\n  const initialValues = {\n    url: '',\n    name: '',\n    folder: '',\n    username: '',\n    password: '',\n  }\n\n  useEffect(() => {\n    // Your useEffect logic goes here\n    console.log('Component mounted!')\n    // Cleanup function (optional)\n    return () => {\n      console.log('Component will unmount!')\n    }\n  }, [])\n\n  const onSubmit = async (values, { setSubmitting, setErrors, resetForm }) => {\n    try {\n      setSubmitting(true)\n      // Make an API request to your server for validation\n      const response = await api.post('/savepassword', values)\n      if (response.status == 200) {\n        try {\n          const response = await api.post('/getpasswordlist')\n          props.passwordlist(response.data.passwords)\n          console.log(response.data.passwords)\n        } catch (error) {\n          const result = await NotAuthenticatedHandler(error)\n          if (result) {\n            dispatch(logoutSuccess())\n            navigate('/login')\n          }\n          if (error.hasOwnProperty('response') && error.response.status == 500) {\n            toast.error('Server Error')\n          } else {\n            toast.error('OoPs! Something Went Wrong.')\n          }\n          console.error('API request failed:', error)\n        }\n        toast.success(response.data.message)\n        resetForm()\n        props.handleClick('password')\n        setCurrentVisible(false)\n      }\n    } catch (error) {\n      if (error.response.status == 422) {\n        setErrors(error.response.data.errors)\n        toast.error(error.response.data.message)\n      } else if (error.hasOwnProperty('response') && error.response.status == 500) {\n        toast.error('Server Error')\n      } else {\n        toast.error('OoPs! Something Went Wrong.')\n      }\n    } finally {\n      setSubmitting(false)\n    }\n  }\n\n  return (\n    <CModal\n      backdrop=\"static\"\n      alignment=\"center\"\n      size=\"lg\"\n      visible={Currentvisible}\n      aria-labelledby=\"ToggleBetweenModalsExample2\"\n    >\n      <Formik validationSchema={schema} onSubmit={onSubmit} initialValues={initialValues}>\n        {({ handleSubmit, handleChange, values, touched, errors, isSubmitting }) => (\n          <CForm className=\"row g-3\" noValidate onSubmit={handleSubmit}>\n            <CModalHeader>\n              <CModalTitle id=\"ToggleBetweenModalsExample2\">\n                <CButton\n                  type=\"button\"\n                  color=\"primary\"\n                  onClick={() => {\n                    setCurrentVisible(false)\n                    props.handleClick('handleClick')\n                  }}\n                >\n                  <CIcon icon={cilArrowCircleLeft} className=\"ml-2\" /> Back to All Items\n                </CButton>\n              </CModalTitle>\n            </CModalHeader>\n            <CModalBody className=\"m-2\">\n              <CRow>\n                <CCol xs={12} className=\"my-2\">\n                  <CFormInput\n                    id=\"url\"\n                    label=\"Url\"\n                    placeholder=\"www.google.com\"\n                    name=\"url\"\n                    onChange={handleChange}\n                    invalid={touched.url && errors.url ? true : false}\n                    value={values.url}\n                  />\n\n                  <CFormFeedback invalid>{errors.url}</CFormFeedback>\n                </CCol>\n                <CCol md={6} className=\"my-2\">\n                  <CFormInput\n                    type=\"text\"\n                    id=\"name\"\n                    label=\"Name\"\n                    name=\"name\"\n                    value={values.name}\n                    onChange={handleChange}\n                    invalid={touched.name && errors.name ? true : false}\n                  />\n                  <CFormFeedback invalid>{errors.name}</CFormFeedback>\n                </CCol>\n                <CCol md={6} className=\"my-2\">\n                  <CFormSelect\n                    id=\"inputState\"\n                    label=\"Folder\"\n                    name=\"folder\"\n                    onChange={handleChange}\n                    invalid={touched.folder && errors.folder ? true : false}\n                    value={values.folder}\n                  >\n                    <option value=\"\">Choose...</option>\n                    {foldersList.map((folder) => (\n                      <option key={folder.id} value={folder.id}>\n                        {folder.folder_name}\n                      </option>\n                    ))}\n                  </CFormSelect>\n                  <CFormFeedback invalid>{errors.folder}</CFormFeedback>\n                </CCol>\n                <CCol md={6} className=\"my-2\">\n                  <CFormInput\n                    type=\"text\"\n                    id=\"username\"\n                    label=\"Username\"\n                    name=\"username\"\n                    value={values.username}\n                    onChange={handleChange}\n                    invalid={touched.username && errors.username ? true : false}\n                  />\n                  <CFormFeedback invalid>{errors.username}</CFormFeedback>\n                </CCol>\n                <CCol md={6} className=\"my-2\">\n                  <CFormInput\n                    type=\"password\"\n                    id=\"password\"\n                    label=\"Site password\"\n                    name=\"password\"\n                    value={values.password}\n                    onChange={handleChange}\n                    invalid={touched.password && errors.password ? true : false}\n                  />\n                  <CFormFeedback invalid>{errors.password}</CFormFeedback>\n                </CCol>\n                <CCol xs={12} className=\"my-2\">\n                  <CFormTextarea\n                    id=\"notes\"\n                    label=\"Notes\"\n                    rows={3}\n                    text=\"Must be 8-20 words long.\"\n                    value={values.notes}\n                    onChange={handleChange}\n                    name=\"notes\"\n                    invalid={touched.notes && errors.notes ? true : false}\n                  ></CFormTextarea>\n                  <CFormFeedback invalid>{errors.notes}</CFormFeedback>\n                </CCol>\n              </CRow>\n            </CModalBody>\n            <CModalFooter>\n              <CButton type=\"submit\" color=\"primary\">\n                Save changes\n              </CButton>\n            </CModalFooter>\n          </CForm>\n        )}\n      </Formik>\n    </CModal>\n  )\n}\n\n// Prop types definition\nPasswordModal.propTypes = {\n  passwordvisible: PropTypes.bool.isRequired, // Assuming 'passwordvisible' is a boolean and is required\n  folders: PropTypes.array.isRequired, // Assuming 'folders' is an array and is required\n  passwordlist: PropTypes.func.isRequired, // Assuming 'passwordlist' is a function and is required\n  handleClick: PropTypes.func.isRequired, // Assuming 'visiblemain' is a function and is required\n}\n\nexport default PasswordModal\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCol,\r\n  CRow,\r\n  CModalHeader,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModal,\r\n  CModalTitle,\r\n  CFormInput,\r\n  CFormSelect,\r\n  CForm,\r\n  CFormTextarea,\r\n  CFormFeedback,\r\n} from '@coreui/react'\r\nimport { cilArrowCircleLeft } from '@coreui/icons'\r\nimport { Formik } from 'formik'\r\nimport * as yup from 'yup'\r\nimport api from '../../../redux-state/api'\r\nimport { toast } from 'react-toastify'\r\nimport PropTypes from 'prop-types'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { NotAuthenticatedHandler } from '../../../utilities/auth'\r\nimport { logoutSuccess } from '../../../redux-state/authSlice'\r\n\r\nfunction FolderForm(props) {\r\n  const [Currentvisible, setCurrentVisible] = useState(props.passwordvisible)\r\n  const [foldersList, setFoldersList] = useState(props.folders)\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n\r\n  const schema = yup.object().shape({\r\n    url: yup.string().required('Field is required'),\r\n    name: yup.string().required('Field is required'),\r\n    folder: yup.string().required('Field is required'),\r\n    username: yup.string().required('Field is required'),\r\n    password: yup.string().required('Field is required'),\r\n  })\r\n\r\n  const initialValues = {\r\n    folder_name: '',\r\n    folder_parent: '',\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('test')\r\n    // Your useEffect logic goes here\r\n    console.log('Component mounted!')\r\n    // Cleanup function (optional)\r\n    return () => {\r\n      console.log('Component will unmount!')\r\n    }\r\n  }, [])\r\n\r\n  const onSubmit = async (values, { setSubmitting, setErrors, resetForm }) => {\r\n    try {\r\n      setSubmitting(true)\r\n      // Make an API request to your server for validation\r\n      const response = await api.post('/savepassword', values)\r\n      if (response.status == 200) {\r\n        try {\r\n          const response = await api.post('/getpasswordlist')\r\n          props.passwordlist(response.data.passwords)\r\n          console.log(response.data.passwords)\r\n        } catch (error) {\r\n          const result = await NotAuthenticatedHandler(error)\r\n          if (result) {\r\n            dispatch(logoutSuccess())\r\n            navigate('/login')\r\n          }\r\n          if (error.hasOwnProperty('response') && error.response.status == 500) {\r\n            toast.error('Server Error')\r\n          } else {\r\n            toast.error('OoPs! Something Went Wrong.')\r\n          }\r\n          console.error('API request failed:', error)\r\n        }\r\n        toast.success(response.data.message)\r\n        resetForm()\r\n        props.handleClick('folder')\r\n        setCurrentVisible(false)\r\n      }\r\n    } catch (error) {\r\n      if (error.response.status == 422) {\r\n        setErrors(error.response.data.errors)\r\n        toast.error(error.response.data.message)\r\n      } else if (error.hasOwnProperty('response') && error.response.status == 500) {\r\n        toast.error('Server Error')\r\n      } else {\r\n        toast.error('OoPs! Something Went Wrong.')\r\n      }\r\n    } finally {\r\n      setSubmitting(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CModal\r\n      backdrop=\"static\"\r\n      alignment=\"center\"\r\n      size=\"lg\"\r\n      visible={Currentvisible}\r\n      aria-labelledby=\"ToggleBetweenModalsExample2\"\r\n    >\r\n      <Formik validationSchema={schema} onSubmit={onSubmit} initialValues={initialValues}>\r\n        {({ handleSubmit, handleChange, values, touched, errors, isSubmitting }) => (\r\n          <CForm className=\"row g-3\" noValidate onSubmit={handleSubmit}>\r\n            <CModalHeader>\r\n              <CModalTitle id=\"ToggleBetweenModalsExample2\">\r\n                <CButton\r\n                  type=\"button\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setCurrentVisible(false)\r\n                    props.handleClick('folder')\r\n                  }}\r\n                >\r\n                  <CIcon icon={cilArrowCircleLeft} className=\"ml-2\" /> Back to All Items\r\n                </CButton>\r\n              </CModalTitle>\r\n            </CModalHeader>\r\n            <CModalBody className=\"m-2\">\r\n              <CRow>\r\n                <CCol xs={12} className=\"my-2\">\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"folder_name\"\r\n                    label=\"Folder Name\"\r\n                    placeholder=\"\"\r\n                    name=\"folder_name\"\r\n                    onChange={handleChange}\r\n                    invalid={touched.folder_name && errors.folder_name ? true : false}\r\n                    value={values.folder_name}\r\n                  />\r\n                  <CFormFeedback invalid>{errors.folder_name}</CFormFeedback>\r\n                </CCol>\r\n                <CCol md={12} className=\"my-2\">\r\n                  <CFormSelect\r\n                    id=\"inputState\"\r\n                    label=\"Folder\"\r\n                    name=\"folder_parent\"\r\n                    onChange={handleChange}\r\n                    invalid={touched.folder_parent && errors.folder_parent ? true : false}\r\n                    value={values.folder_parent}\r\n                  >\r\n                    <option value=\"\">Choose...</option>\r\n                    {foldersList.map((folder) => (\r\n                      <option key={folder.id} value={folder.id}>\r\n                        {folder.folder_name}\r\n                      </option>\r\n                    ))}\r\n                  </CFormSelect>\r\n                  <CFormFeedback invalid>{errors.folder_parent}</CFormFeedback>\r\n                </CCol>\r\n              </CRow>\r\n            </CModalBody>\r\n            <CModalFooter>\r\n              <CButton type=\"submit\" color=\"primary\">\r\n                Save changes\r\n              </CButton>\r\n            </CModalFooter>\r\n          </CForm>\r\n        )}\r\n      </Formik>\r\n    </CModal>\r\n  )\r\n}\r\n\r\n// Prop types definition\r\nFolderForm.propTypes = {\r\n  passwordvisible: PropTypes.bool.isRequired, // Assuming 'passwordvisible' is a boolean and is required\r\n  folders: PropTypes.array.isRequired, // Assuming 'folders' is an array and is required\r\n  passwordlist: PropTypes.func.isRequired, // Assuming 'passwordlist' is a function and is required\r\n  handleClick: PropTypes.func.isRequired, // Assuming 'visiblemain' is a function and is required\r\n}\r\n\r\nexport default FolderForm\r\n","import React, { useEffect, useState, Suspense } from 'react'\nimport classNames from 'classnames'\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CRow,\n  CModalHeader,\n  CModalBody,\n  CModal,\n  CModalTitle,\n  CTooltip,\n  CCardImage,\n  CCardText,\n  CCardTitle,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilPlus, cilLockLocked, cilFolder, cilNotes } from '@coreui/icons'\nimport { toast } from 'react-toastify'\n\nimport api from '../../redux-state/api'\nimport { NotAuthenticatedHandler } from '../../utilities/auth'\nimport { useDispatch } from 'react-redux'\nimport { useNavigate } from 'react-router-dom'\nimport { logoutSuccess } from '../../redux-state/authSlice'\nimport lock from '../../assets/images/lock.jpg'\nimport PasswordModal from '../items/Password/PasswordModal'\nimport FolderModal from '../items/Folders/FolderModal'\nimport NotesModal from '../items/Notes/NotesModal'\nimport AddressModal from '../items/Addresses/AddressModal'\nimport { CSpinner } from '@coreui/react'\n\nfunction Dashboard() {\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n  const [visiblemain, setVisibleMain] = useState(false)\n  const [showpasswordForm, setShowPasswordForm] = useState(false)\n  const [showfolderform, setShowfolderform] = useState(false)\n  const [shownoteform, setShowNoteform] = useState(false)\n  const [showaddressform, setShowAddressform] = useState(false)\n  const [foldersList, setFoldersList] = useState([])\n  const [passwordslist, setPasswordsList] = useState([])\n\n  const handleClick = (current) => {\n    if (current == 'folder') {\n      setVisibleMain((prevStatus) => !prevStatus)\n      setShowfolderform((prevStatus) => !prevStatus)\n    } else if (current == 'password') {\n      setVisibleMain((prevStatus) => !prevStatus)\n      setShowPasswordForm((prevStatus) => !prevStatus)\n    } else if (current == 'address') {\n      setVisibleMain((prevStatus) => !prevStatus)\n      setShowAddressform((prevStatus) => !prevStatus)\n    } else {\n      setVisibleMain((prevStatus) => !prevStatus)\n    }\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await api.post('/get-user')\n        console.log(response.data)\n      } catch (error) {\n        const result = await NotAuthenticatedHandler(error)\n        if (result) {\n          dispatch(logoutSuccess())\n          navigate('/login')\n        }\n        console.error('API request failed:', error)\n      }\n      try {\n        const response = await api.post('/getpasswordlist')\n        setPasswordsList(response.data.passwords)\n        console.log(response.data.passwords)\n      } catch (error) {\n        const result = await NotAuthenticatedHandler(error)\n        if (result) {\n          dispatch(logoutSuccess())\n          navigate('/login')\n        }\n        console.error('API request failed:', error)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  const fetchFolders = async (type) => {\n    try {\n      const response = await api.post('/getfolderslist')\n      if (response.status == 200) {\n        await setFoldersList(response.data.folders)\n        console.log(response.data.folders)\n        // Assuming setShowfolderform and setShowPasswordForm are asynchronous, use await\n        if (type === 'password') {\n          await setShowPasswordForm(true)\n        } else if (type === 'notes') {\n          await setShowNoteform(true)\n        } else if (type === 'folders') {\n          await setShowfolderform(true)\n        } else if (type === 'address') {\n          await setShowAddressform(true)\n        }\n      }\n    } catch (error) {\n      const result = await NotAuthenticatedHandler(error)\n      if (result) {\n        dispatch(logoutSuccess())\n        navigate('/login')\n      }\n      if (error.hasOwnProperty('response') && error.response.status == 500) {\n        toast.error('Server Error')\n      } else {\n        toast.error('OoPs! Something Went Wrong.')\n      }\n    }\n  }\n\n  return (\n    <>\n      <CRow>\n        {passwordslist.map((password) => (\n          <CCol xs={2} sm={3} lg={2} className=\"my-2\" key={password.id}>\n            <CCard>\n              <CCardImage orientation=\"top\" src={lock} height=\"200\" />\n              <CCardBody>\n                <CCardTitle>{password.name || password.url}</CCardTitle>\n                <CCardText>{password.username}</CCardText>\n                <CButton className=\"btn btn-primary\" href={password.url}>\n                  Launch\n                </CButton>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        ))}\n      </CRow>\n\n      <div className=\"addbtnparent\">\n        <CTooltip content=\"Add Item.\" placement=\"top\">\n          <CButton className=\"btn btn-primary addbtn\" onClick={() => setVisibleMain(!visiblemain)}>\n            <CIcon icon={cilPlus}></CIcon>\n          </CButton>\n        </CTooltip>\n      </div>\n\n      {showpasswordForm ? (\n        <Suspense fallback={<CSpinner color=\"primary\" />}>\n          <PasswordModal\n            passwordvisible={showpasswordForm}\n            folders={foldersList}\n            passwordlist={setPasswordsList}\n            handleClick={handleClick}\n          />\n        </Suspense>\n      ) : visiblemain ? (\n        <CModal\n          alignment=\"center\"\n          size=\"lg\"\n          visible={visiblemain}\n          onClose={() => setVisibleMain(false)}\n          aria-labelledby=\"LiveDemoExampleLabel\"\n        >\n          <CModalHeader onClose={() => setVisibleMain(false)}>\n            <CModalTitle id=\"LiveDemoExampleLabel\">Add Item</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CButton\n              color=\"primary\"\n              onClick={() => {\n                fetchFolders('password')\n              }}\n            >\n              <div className=\"d-flex flex-column justify-content-center align-items-center\">\n                <CIcon icon={cilLockLocked} size=\"lg\" className=\"ml-2 text\" /> Password\n              </div>\n            </CButton>\n            <CButton\n              color=\"primary\"\n              className=\"ms-3\"\n              onClick={() => {\n                fetchFolders('folder')\n              }}\n            >\n              <div className=\"d-flex flex-column justify-content-center align-items-center\">\n                <CIcon icon={cilFolder} size=\"lg\" className=\"ml-2 text\" /> Folder\n              </div>\n            </CButton>\n            <CButton\n              color=\"primary\"\n              className=\"ms-3\"\n              onClick={() => {\n                fetchFolders('notes')\n              }}\n            >\n              <div className=\"d-flex flex-column justify-content-center align-items-center\">\n                <CIcon icon={cilNotes} size=\"lg\" className=\"ml-2 text\" /> Notes\n              </div>\n            </CButton>\n            <CButton\n              color=\"primary\"\n              onClick={() => {\n                fetchFolders('password')\n              }}\n            >\n              <div className=\"d-flex flex-column justify-content-center align-items-center\">\n                <CIcon icon={cilLockLocked} size=\"lg\" className=\"ml-2 text\" /> Address\n              </div>\n            </CButton>\n          </CModalBody>\n        </CModal>\n      ) : setShowfolderform ? (\n        <Suspense fallback={<CSpinner color=\"primary\" />}>\n          <FolderModal\n            passwordvisible={showfolderform}\n            folders={foldersList}\n            passwordlist={setPasswordsList}\n            handleClick={handleClick}\n          />\n        </Suspense>\n      ) : setShowNoteform ? (\n        // Fallback or another condition\n        <NotesModal\n          passwordvisible={shownoteform}\n          folders={foldersList}\n          passwordlist={setPasswordsList}\n          handleClick={handleClick}\n        />\n      ) : setShowAddressform ? (\n        // Fallback or another condition\n        <AddressModal\n          passwordvisible={showaddressform}\n          folders={foldersList}\n          passwordlist={setPasswordsList}\n          handleClick={handleClick}\n        />\n      ) : (\n        <></>\n      )}\n    </>\n  )\n}\n\nexport default Dashboard\n"],"names":["props","Currentvisible","setCurrentVisible","useState","passwordvisible","foldersList","setFoldersList","folders","dispatch","useDispatch","navigate","useNavigate","schema","yup","shape","url","required","name","folder","username","password","useEffect","console","log","_jsx","CModal","backdrop","alignment","size","visible","children","Formik","validationSchema","onSubmit","async","values","_ref","setSubmitting","setErrors","resetForm","response","api","post","status","passwordlist","data","passwords","error","NotAuthenticatedHandler","logoutSuccess","hasOwnProperty","toast","success","message","handleClick","errors","initialValues","_ref2","handleSubmit","handleChange","touched","isSubmitting","_jsxs","CForm","className","noValidate","CModalHeader","CModalTitle","id","CButton","type","color","onClick","CIcon","icon","cilArrowCircleLeft","CModalBody","CRow","CCol","xs","CFormInput","label","placeholder","onChange","invalid","value","CFormFeedback","md","CFormSelect","map","folder_name","CFormTextarea","rows","text","notes","CModalFooter","folder_parent","visiblemain","setVisibleMain","showpasswordForm","setShowPasswordForm","showfolderform","setShowfolderform","shownoteform","setShowNoteform","showaddressform","setShowAddressform","passwordslist","setPasswordsList","current","prevStatus","fetchData","fetchFolders","_Fragment","sm","lg","CCard","CCardImage","orientation","src","lock","height","CCardBody","CCardTitle","CCardText","href","CTooltip","content","placement","cilPlus","Suspense","fallback","CSpinner","PasswordModal","onClose","cilLockLocked","cilFolder","cilNotes","FolderModal","NotesModal","AddressModal"],"sourceRoot":""}